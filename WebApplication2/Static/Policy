using System.Diagnostics;
using System.Reflection;
using System.Text.Json;
using Serilog.Core;
using Serilog.Events;

namespace WebApplication2;

public class IgnoreLoggerDestructuringPolicy : IDestructuringPolicy
{
    private static readonly HashSet<string> ExcludedDictionaryKeys = new(StringComparer.OrdinalIgnoreCase)
    {
        "$type",
        "ValueKind",
        "Comparer",
        "Keys",
        "Values",
        "$modelType"
    };

    public bool TryDestructure(object? value, ILogEventPropertyValueFactory propertyValueFactory, out LogEventPropertyValue result)
    {
        result = null!;

        if (value == null)
            return false;

        var type = value.GetType();
        var logProps = new List<LogEventProperty>();

        // Обработка словарей
        if (value is Dictionary<string, object> dictionary)
        {
            // Пытаемся определить тип модели из словаря
            Type? modelType = null;
            if (dictionary.TryGetValue("$modelType", out var modelTypeObj) && modelTypeObj is Type mt)
            {
                modelType = mt;
            }

            foreach (var kvp in dictionary)
            {
                // Пропускаем служебные ключи и ключи с [IgnoreLogger]
                if (ExcludedDictionaryKeys.Contains(kvp.Key) || (modelType != null && IsIgnoredProperty(modelType, kvp.Key)))
                    continue;

                try
                {
                    var propValue = NormalizeValue(kvp.Value);
                    var logEventPropValue = propertyValueFactory.CreatePropertyValue(propValue, destructureObjects: true);
                    logProps.Add(new LogEventProperty(kvp.Key, logEventPropValue));
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error processing dictionary key {kvp.Key}: {ex.Message}");
                    continue;
                }
            }
        }
        else
        {
            // Обработка объектов
            var properties = type
                .GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(p => p.CanRead && p.GetCustomAttribute<IgnoreLoggerAttribute>(inherit: false) == null);

            foreach (var prop in properties)
            {
                try
                {
                    var propValue = prop.GetValue(value);
                    var normalizedValue = NormalizeValue(propValue);
                    var logEventPropValue = propertyValueFactory.CreatePropertyValue(normalizedValue, destructureObjects: true);
                    logProps.Add(new LogEventProperty(prop.Name, logEventPropValue));
                }
                catch (TargetParameterCountException ex)
                {
                    Debug.WriteLine($"TargetParameterCountException in property {prop.Name}: {ex.Message}");
                    continue;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error in property {prop.Name}: {ex.Message}");
                    continue;
                }
            }
        }

        result = new StructureValue(logProps);
        return true;
    }

    private bool IsIgnoredProperty(Type type, string key)
    {
        var property = type.GetProperty(key, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
        return property != null && property.GetCustomAttribute<IgnoreLoggerAttribute>(inherit: false) != null;
    }

    private object? NormalizeValue(object? value)
    {
        if (value is JsonElement jsonElement)
        {
            return jsonElement.ValueKind switch
            {
                JsonValueKind.String => jsonElement.GetString(),
                JsonValueKind.Number => jsonElement.TryGetInt64(out long l) ? l : jsonElement.GetDouble(),
                JsonValueKind.True => true,
                JsonValueKind.False => false,
                JsonValueKind.Null => null,
                JsonValueKind.Array => jsonElement.EnumerateArray().Select(e => NormalizeValue(e)).ToList(),
                JsonValueKind.Object => jsonElement.EnumerateObject()
                    .ToDictionary(p => p.Name, p => NormalizeValue(p.Value)),
                _ => jsonElement.ToString()
            };
        }
        return value;
    }
}